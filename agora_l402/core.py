"""SDK to interact with Agora private api"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['base_url', 'search_trial', 'text_search', 'get_product_detail', 'create_cart', 'add_to_cart', 'create_order',
           'track_order', 'refresh_token']

# %% ../nbs/00_core.ipynb 3
from fastcore.utils import *
from fastcore.xtras import dict2obj
from httpx import get as xget, post as xpost, put as xput
from fasthtml.common import *
from monsterui.core import *


# %% ../nbs/00_core.ipynb 4
base_url = 'https://zues.searchagora.com/api/v1'

# %% ../nbs/00_core.ipynb 5
def search_trial(query: str, # Search query text
                 price_range: List[int] = None, # Price range filter [min_price, max_price]
                 sort: str = None, # Sorting field: price:relevance
                 order: str = None): # Sorting order: asc or desc
    """
    Search for products using the trial endpoint.
    
    Args:
        query (str): Search query text
        price_range (list, optional): Price range filter [min_price, max_price]
        sort (str, optional): Sorting field: price:relevance
        order (str, optional): Sorting order: asc or desc
        
    Returns:
        dict: Search results with products matching the query
    
    Example:
        search_trial("shoes", [100, 1000], "price:relevance", "desc")
    """
    endpoint = f'{base_url}/search/trial'
    
    # Build query parameters
    params = {'q': query}
    
    if price_range: params['priceRange'] = price_range
    if sort: params['sort'] = sort
    if order: params['order'] = order
    
    # Make the request
    r = xget(endpoint, params=params)
    
    # Return parsed JSON response
    return r.json()

# %% ../nbs/00_core.ipynb 7
def text_search(token, query, count=20, page=1, price_range=None, sort=None, order=None, image_id=None):
    """
    Search for products with full functionality.
    
    Args:
        token (str): Authentication token for API access
        query (str): Search query text
        count (int, optional): Number of products per page (default: 20, max: 250)
        page (int, optional): Page number for pagination (default: 1)
        price_range (list, optional): Price range filter [min_price, max_price]
        sort (str, optional): Sorting field: price:relevance
        order (str, optional): Sorting order: asc or desc
        image_id (str, optional): Image search identifier
        
    Returns:
        dict: Search results with products matching the query
    
    Example:
        text_search("your_token", "red shoes", count=10, page=1, 
                   price_range=[50, 200], sort="price", order="asc")
    """
    endpoint = f'{base_url}/search'
    
    # Build query parameters
    params = {'q': query, 'count': count, 'page': page}
    
    if price_range: params['priceRange'] = price_range
    if sort: params['sort'] = sort
    if order: params['order'] = order
    if image_id: params['imageId'] = image_id
    
    # Set authorization header
    headers = {'Authorization': f'Bearer {token}'}
    
    # Make the request
    r = xget(endpoint, params=params, headers=headers)
    
    # Return parsed JSON response
    return dict2obj(r.json())

# %% ../nbs/00_core.ipynb 8
def get_product_detail(token, slug):
    """
    Retrieve detailed information about a specific product.
    
    Args:
        token (str): Authentication token for API access
        slug (str): The unique identifier of the product to retrieve
        
    Returns:
        dict: Detailed information about the requested product
    
    Example:
        get_product_detail("your_token", "calzuro-without-pistachio-eb12f468-48a2-48af-9f5e-3fda5f6c135c-1708446961787")
    """
    endpoint = f'{base_url}/product-detail'
    
    # Build query parameters
    params = {'slug': slug}
    
    # Set authorization header
    headers = {'Authorization': f'Bearer {token}'}
    
    # Make the request
    r = xget(endpoint, params=params, headers=headers)
    
    # Return parsed JSON response
    return dict2obj(r.json())


# %% ../nbs/00_core.ipynb 10
def create_cart(token, custom_user_id=None, items=None):
    """
    Create a new cart for a user.
    
    Args:
        token (str): Authentication token for API access
        custom_user_id (str, optional): Unique identifier for the user
        items (list, optional): List of items to add to the cart
            Each item should be a dict with:
            - variantId (int): Variant ID of the product
            - product (int/str): Product ID
            - quantity (int): Quantity of the product
            
    Returns:
        dict: Response with cart creation status
    
    Example:
        create_cart("your_token", "user123", [
            {"variantId": 123, "product": "678f71a9356a36f784ee2e88", "quantity": 1}
        ])
    """
    url = f'{base_url}/cart'
    
    # Set headers
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # Add custom user ID if provided
    if custom_user_id:
        headers['customuserid'] = custom_user_id
    
    # Prepare request body
    data = {}
    if items:
        data['items'] = items
    
    # Make the request
    r = xpost(url, headers=headers, json=data)
    
    # Return parsed JSON response
    return dict2obj(r.json())

# %% ../nbs/00_core.ipynb 11
def add_to_cart(token, product_id, variant_id, quantity=1, custom_user_id=None):
    """
    Add a product to an existing cart.
    
    Args:
        token (str): Authentication token for API access
        product_id (str/int): ID of the product to add
        variant_id (str/int): Variant ID of the product
        quantity (int, optional): Quantity of the product (default: 1)
        custom_user_id (str, optional): Unique identifier for the user
        
    Returns:
        dict: Response with cart update status
    
    Example:
        add_to_cart("your_token", "678f71a9356a36f784ee2e88", "2061038485517", 2, "user123")
    """
    url = f'{base_url}/cart'
    
    # Set headers
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # Add custom user ID if provided
    if custom_user_id:
        headers['customuserid'] = custom_user_id
    
    # Prepare request body
    data = {
        "product": {
            "product": product_id,
            "variantId": variant_id,
            "quantity": quantity
        }
    }
    
    # Make the PUT request
    r = xput(url, headers=headers, json=data)
    
    # Return parsed JSON response
    return dict2obj(r.json())

# %% ../nbs/00_core.ipynb 12
def create_order(token, encrypted_payment_info, shipping_address, current_user):
    """
    Create a new order from cart items.
    
    Args:
        token (str): Authentication token for API access
        encrypted_payment_info (str): Encrypted payment information
        shipping_address (dict): Dictionary containing shipping address details:
            - addressFirst (str): Street address
            - city (str): City name
            - state (str): State/province
            - country (str): Country name
            - addressName (str): Name associated with address
            - zipCode (str): Postal/ZIP code
        current_user (dict): Dictionary containing user information:
            - firstname (str): User's first name
            - lastname (str): User's last name
            - email (str): User's email address
            - _id (str): User's ID
            
    Returns:
        dict: Order creation response with success status and order ID
    
    Example:
        create_order(
            "your_token",
            "encrypted_data",
            {
                "addressFirst": "123 Main St",
                "city": "New York",
                "state": "NY",
                "country": "US",
                "addressName": "Home",
                "zipCode": "10001"
            },
            {
                "firstname": "John",
                "lastname": "Doe",
                "email": "john@example.com",
                "_id": "user123"
            }
        )
    """
    url = f'{base_url}/order'
    
    # Set headers
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # Prepare request body
    data = {
        "encryptedPaymentInfo": encrypted_payment_info,
        "shippingAddress": shipping_address,
        "currentUser": current_user
    }
    
    # Make the POST request
    r = xpost(url, headers=headers, json=data)
    
    # Return parsed JSON response
    return dict2obj(r.json())

# %% ../nbs/00_core.ipynb 13
def track_order(token, order_id):
    """
    Track an existing order by its ID.
    
    Args:
        token (str): Authentication token for API access
        order_id (str): Unique identifier of the order to track
        
    Returns:
        dict: Detailed order information including items, status, and shipping details
    
    Example:
        track_order("your_token", "67c8577b3e370f07d12c7722")
    """
    url = f'{base_url}/order-tracking/{order_id}'
    
    # Set headers
    headers = {
        'Authorization': f'Bearer {token}',
        'Content-Type': 'application/json'
    }
    
    # Make the GET request
    r = xget(url, headers=headers)
    
    # Return parsed JSON response
    return dict2obj(r.json())

# %% ../nbs/00_core.ipynb 14
def refresh_token(refresh_token_str):
    """
    Refresh API key and token by providing a valid refresh token.
    
    Args:
        refresh_token_str (str): The refresh token to validate and retrieve
                                 a new API key and refresh token
        
    Returns:
        dict: Object containing new API key, refresh token, and expiration time
              with the following structure:
              {
                "status": "success",
                "data": {
                  "apiKey": "...",
                  "refreshToken": "...",
                  "expiresAt": "..."
                }
              }
    
    Raises:
        ValueError: If the refresh token is invalid or missing
    """
    endpoint = f'{base_url}/refresh-token'
    
    # Prepare request body
    data = {"refreshToken": refresh_token_str}
    
    # Make the POST request
    r = xpost(endpoint, json=data)
    response = dict2obj(r.json())
    
    # Check for errors
    if r.status_code != 200 or response.status == "error":
        raise ValueError(response.message)
        
    return response

